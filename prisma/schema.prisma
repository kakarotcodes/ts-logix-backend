generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/**
 * ------------------------------------------------------------------------ ENUMS -------------------------------------------------------------------------
 */

enum RoleName {
    ADMIN
    CLIENT
    STAFF
}

enum DocumentApplicableTo {
    ENTRY
    DEPARTURE
    BOTH
}

/**
 * ------------------------------------------------------------------------ MODELS -------------------------------------------------------------------------
 */

model Origin {
    origin_id  String       @id @default(uuid()) @map("origin_id")
    name       String       @unique
    // Relation: Many Origins belong to one Country.
    country_id String?
    country    Country?     @relation(fields: [country_id], references: [country_id])
    EntryOrder EntryOrder[]

    @@map("origins")
}

model DocumentType {
    document_type_id String               @id @default(uuid()) @map("document_type_id")
    name             String               @unique
    applicable_to    DocumentApplicableTo
    EntryOrder       EntryOrder[]

    @@map("document_types")
}

model ExitOption {
    exit_option_id  String           @id @default(uuid()) @map("exit_option_id")
    name            String           @unique
    carrier_details Json?
    DepartureOrder  DepartureOrder[]

    @@map("exit_options")
}

model CustomerType {
    customer_type_id String     @id @default(uuid()) @map("customer_type_id")
    name             String     @unique
    discount_rate    Decimal?   @db.Decimal(5, 2)
    Customer         Customer[]

    @@map("customer_types")
}

model Label {
    label_id              String           @id @default(uuid()) @map("label_id")
    name                  String           @unique
    shipping_requirements Json?
    DepartureOrder        DepartureOrder[]

    @@map("labels")
}

model ProductLine {
    product_line_id String       @id @default(uuid()) @map("product_line_id")
    name            String       @unique
    temperature_id  String?
    temperature     Temperature? @relation(fields: [temperature_id], references: [temperature_id])
    Product         Product[]
    EntryOrder      EntryOrder[]

    @@map("product_lines")
}

model GroupName {
    group_id         String    @id @default(uuid()) @map("group_id")
    name             String    @unique
    product_category String?
    Product          Product[]

    @@map("group_names")
}

model Country {
    country_id String     @id @default(uuid()) @map("country_id")
    name       String     @unique
    iso_code   String?    @unique @db.Char(2)
    Origin     Origin[]
    Supplier   Supplier[]
    Product    Product[]

    @@map("countries")
}

model Temperature {
    temperature_id String        @id @default(uuid()) @map("temperature_id")
    range          String        @unique
    min_celsius    Int?
    max_celsius    Int?
    ProductLine    ProductLine[]
    EntryOrder     EntryOrder[]

    @@map("temperatures")
}

model ActiveState {
    state_id   String       @id @default(uuid()) @map("state_id")
    name       String       @unique
    User       User[]
    Supplier   Supplier[]
    Customer   Customer[]
    Product    Product[]
    EntryOrder EntryOrder[]

    @@map("active_states")
}

model Organisation {
    organisation_id String   @id @default(uuid()) @map("organisation_id")
    name            String
    address         Json?
    tax_id          String?
    created_at      DateTime @default(now())

    // Relations
    users  User[]
    orders Order[]

    @@map("organisations")
}

model User {
    id              String       @id @default(uuid()) @map("id") // New UUID for relationships
    user_id         String       @unique @map("user_id") // Used for login
    organisation_id String
    organisation    Organisation @relation(fields: [organisation_id], references: [organisation_id])

    email         String @unique
    password_hash String @map("password_hash")

    role_id String?
    role    Role?   @relation(fields: [role_id], references: [role_id])

    active_state_id String?
    active_state    ActiveState? @relation(fields: [active_state_id], references: [state_id])

    created_at DateTime @default(now())

    orders     Order[]      @relation("OrderCreatedBy")
    EntryOrder EntryOrder[]

    @@map("users")
}

model Role {
    role_id String   @id @default(uuid()) @map("role_id")
    name    RoleName @unique
    users   User[] // ✅ Fix: Removed `@relation(fields: [...], references: [...])`

    @@map("roles")
}

model Supplier {
    supplier_id           String       @id @default(uuid()) @map("supplier_id")
    name                  String
    country_id            String?
    country               Country?     @relation(fields: [country_id], references: [country_id])
    document_types        Json? // JSON array/object storing supported document types
    active_state_id       String?
    active_state          ActiveState? @relation(fields: [active_state_id], references: [state_id])
    maintenance_notes     String?
    last_maintenance_date DateTime?    @db.Date
    EntryOrder            EntryOrder[]

    @@index([country_id], name: "idx_supplier_country")
    @@map("suppliers")
}

model Customer {
    customer_id     String           @id @default(uuid()) @map("customer_id")
    name            String
    type_id         String
    type            CustomerType     @relation(fields: [type_id], references: [customer_type_id])
    billing_address Json?
    active_state_id String?
    active_state    ActiveState?     @relation(fields: [active_state_id], references: [state_id])
    created_at      DateTime         @default(now())
    DepartureOrder  DepartureOrder[]

    @@index([type_id], name: "idx_customer_type")
    @@map("customers")
}

model Product {
    product_id            String       @id @default(uuid()) @map("product_id")
    name                  String
    product_line_id       String
    product_line          ProductLine  @relation(fields: [product_line_id], references: [product_line_id])
    group_id              String
    group                 GroupName    @relation(fields: [group_id], references: [group_id])
    country_id            String
    country               Country      @relation(fields: [country_id], references: [country_id])
    active_state_id       String?
    active_state          ActiveState? @relation(fields: [active_state_id], references: [state_id])
    maintenance_schedule  Json?
    last_maintenance_date DateTime?    @db.Date

    @@index([last_maintenance_date], name: "idx_product_maintenance")
    @@map("products")
}

model Order {
    order_id        String       @id @default(uuid()) @map("order_id")
    order_type      String // Constraint: must be one of ('ENTRY', 'DEPARTURE')
    status          String       @default("PENDING")
    organisation_id String
    organisation    Organisation @relation(fields: [organisation_id], references: [organisation_id])
    created_by      String // Now references User.id (UUID)
    createdBy       User         @relation("OrderCreatedBy", fields: [created_by], references: [id]) // Changed to reference 'id'

    created_at DateTime @default(now())

    entryOrder     EntryOrder?
    departureOrder DepartureOrder?
    OrderType      OrderType?      @relation(fields: [orderTypeId], references: [id])
    orderTypeId    Int?

    @@index([created_at], name: "idx_order_creation")
    @@map("orders")
}

model OrderType {
    id          Int     @id @default(autoincrement())
    name        String  @unique
    description String?
    schema      String? // JSON string for schema
    orders      Order[]

    @@map("order_types")
}

model EntryOrder {
    entry_order_id String @id @default(uuid()) @map("entry_order_id")
    order_id       String @unique // One-to-One relation with `Order`
    order          Order  @relation(fields: [order_id], references: [order_id])

    // --------------------------
    // FIELDS FROM DB (references)
    // --------------------------

    // Origin
    origin_id String?
    origin    Origin? @relation(fields: [origin_id], references: [origin_id])

    // Document 
    // (If you’re storing “document” in `DocumentType`, keep it. 
    // Otherwise, point it to whichever table you use to store "document" items.)
    document_type_id String?
    documentType     DocumentType? @relation(fields: [document_type_id], references: [document_type_id])

    // Personnel in charge
    // (If the person is a user from DB, link to `User`—adjust references as needed.)
    personnel_incharge_id String?
    personnel_incharge    User?   @relation(fields: [personnel_incharge_id], references: [id])
    // If your `User` model has `user_id` as business ID and `id` as the PK, 
    // then references: [id] is correct. Adjust if different.

    // Supplier
    supplier_id String?
    supplier    Supplier? @relation(fields: [supplier_id], references: [supplier_id])

    // --------------
    // TEXT FIELDS
    // --------------

    entry_order_no                String? // text
    document_status               String? // fixed or store as text
    observation                   String?
    total_volume                  String?
    total_weight                  String?
    cif_value                     String?
    product                       String?
    protocol_analysis_certificate String? // file upload url
    lot_series                    String?
    quantity_packaging            String?
    presentation                  String?
    total_qty                     String?
    technical_specification       String? // file upload url
    temperature                   String?
    humidity                      String?
    order_progress_id             String?

    // -----------------
    // DATETIME FIELDS
    // -----------------
    registration_date   DateTime?
    document_date       DateTime?
    admission_date_time DateTime?
    mfd_date_time       DateTime?
    expiration_date     DateTime?

    // ------------------------------------------------------
    // LEGACY FIELDS (from previous schema) – keep if needed
    // ------------------------------------------------------
    batch_number               String?
    received_quantity          Int?
    unit                       String?
    expiry_date                DateTime?
    storage_location           String?
    quality_check              Boolean      @default(false)
    ProductLine                ProductLine? @relation(fields: [productLineProduct_line_id], references: [product_line_id])
    productLineProduct_line_id String?
    Temperature                Temperature? @relation(fields: [temperatureTemperature_id], references: [temperature_id])
    temperatureTemperature_id  String?
    ActiveState                ActiveState? @relation(fields: [activeStateState_id], references: [state_id])
    activeStateState_id        String?

    @@map("entry_orders")
}

model DepartureOrder {
    // Primary key also referencing orders.order_id
    departure_order_id String      @id @map("departure_order_id")
    order              Order       @relation(fields: [departure_order_id], references: [order_id])
    customer_id        String?
    customer           Customer?   @relation(fields: [customer_id], references: [customer_id])
    exit_option_id     String?
    exitOption         ExitOption? @relation(fields: [exit_option_id], references: [exit_option_id])
    label_id           String?
    label              Label?      @relation(fields: [label_id], references: [label_id])
    shipping_details   Json?

    @@map("departure_orders")
}
