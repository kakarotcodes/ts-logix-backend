generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Role enum simplified to just customer and warehouse roles
enum RoleName {
  CUSTOMER 
  WAREHOUSE
  ADMIN
}

// Packaging status enum based on your codes
enum PackagingStatus {
  NORMAL           // Codes: 30-37
  PARTIALLY_DAMAGED // Codes: 40-47  
  DAMAGED          // Codes: 50-57
}

// Packaging type enum
enum PackagingType {
  PALET    // 30, 40, 50
  BOX      // 31, 41, 51
  SACK     // 32, 42, 52
  UNIT     // 33, 43, 53
  PACK     // 34, 44, 54
  BARRELS  // 35, 45, 55
  BUNDLE   // 36, 46, 56
  OTHER    // 37, 47, 57
}

// Updated enums to match your requirements
enum OriginType {
  COMPRA_LOCAL         // Local Purchase
  IMPORTACION          // Import
  DEVOLUCION          // Return
  ACONDICIONADO       // Conditioned
  TRANSFERENCIA_INTERNA // Internal Transfer
  FRACCIONADO         // Fractioned
}

enum DocumentTypeEntry {
  PACKING_LIST
  FACTURA
  CERTIFICADO_ANALISIS
  RRSS
  PERMISO_ESPECIAL
  OTRO
}

enum DocumentTypeDeparture {
  INVOICE
  DELIVERY_NOTE
  TRANSFER_RECEIPT
  SHIPPING_MANIFEST
  CUSTOMS_DECLARATION
  OTRO
}

enum OrderStatusEntry {
  REVISION      // Review
  PRESENTACION  // Presentation
  FINALIZACION  // Finalization
}

enum OrderStatusDeparture {
  PENDING       // Pendiente
  PROCESSING    // En Proceso
  READY         // Listo
  SHIPPED       // Enviado
  DELIVERED     // Entregado
}

enum PresentationType {
  CAJA     // BOX
  PALETA   // PALLET
  SACO     // SACK
  UNIDAD   // UNIT
  PAQUETE  // PACKAGE
  TAMBOS   // DRUMS
  BULTO    // BUNDLE
  OTRO     // OTHER
}

enum TemperatureRangeType {
  RANGE_15_30  // 15°C - 30°C
  RANGE_15_25  // 15°C - 25°C
  RANGE_2_8    // 2°C - 8°C
  AMBIENTE     // Ambient
}

enum ProductStatus {
  // Normal status codes
  PAL_NORMAL  // 30-PAL-NORMAL
  CAJ_NORMAL  // 31-CAJ-NORMAL
  SAC_NORMAL  // 32-SAC-NORMAL
  UNI_NORMAL  // 33-UNI-NORMAL
  PAQ_NORMAL  // 34-PAQ-NORMAL
  TAM_NORMAL  // 35-TAM-NORMAL
  BUL_NORMAL  // 36-BUL-NORMAL
  OTR_NORMAL  // 37-OTR-NORMAL
  
  // Damaged status codes
  PAL_DANADA  // 40-PAL-DAÑADA
  CAJ_DANADA  // 41-CAJ-DAÑADA
  SAC_DANADO  // 42-SAC-DAÑADO
  UNI_DANADA  // 43-UNI-DANADA
  PAQ_DANADO  // 44-PAQ-DANADO
  TAM_DANADO  // 45-TAM-DANADO
  BUL_DANADO  // 46-BUL-DANADO
  OTR_DANADO  // 47-OTR-DANADO
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum CellKind {
  NORMAL
  DAMAGED    
  TRANSFER   
  RESERVED   
}

enum CellStatus {
  AVAILABLE
  OCCUPIED
}

enum CellRole {
  STANDARD
  DAMAGED
  EXPIRED
  RETURNS
  SAMPLES
  REJECTED
}

enum DocumentApplicableTo {
  ENTRY
  DEPARTURE
}

enum LocationType {
  STORAGE
  LOADING
  UNLOADING
  TRANSIT
  REPACKAGING
  INSPECTION
  RETURN
  REPAIR
  WAREHOUSE
  DISTRIBUTION
}

enum MovementType {
  ENTRY
  DEPARTURE
  TRANSFER
  ADJUSTMENT
  RETURN        
  DISPOSAL         
  RECALL         
  INSPECTION       
}

enum InventoryStatus {
  AVAILABLE
  RESERVED
  DAMAGED
  DEPLETED
  EXPIRED
  IN_TRANSIT      
  PENDING_INSPECTION 
  QUARANTINED 
  RETURNED       
  DISPOSED        
}

// ✅ NEW: Quality Control States for inventory flow
enum QualityControlStatus {
  CUARENTENA    // Quarantine - initial state after allocation
  APROBADO      // Approved - ready for departure
  DEVOLUCIONES  // Returns - products to be returned
  CONTRAMUESTRAS // Samples - products kept for sampling
  RECHAZADOS    // Rejected - products that failed quality check
}

// ✅ NEW: Action types for comprehensive traceability
enum SystemAction {
  ENTRY_ORDER_CREATED
  ENTRY_ORDER_REVIEWED
  ENTRY_ORDER_APPROVED
  ENTRY_ORDER_REJECTED
  INVENTORY_ALLOCATED
  QUALITY_STATUS_CHANGED
  INVENTORY_MOVED
  DEPARTURE_ORDER_CREATED
  DEPARTURE_ORDER_REVIEWED
  DEPARTURE_ORDER_APPROVED
  DEPARTURE_ALLOCATED
  PRODUCT_DISPATCHED
  CELL_ASSIGNED
  CELL_UPDATED
  USER_LOGIN
  USER_LOGOUT
}

enum AuditResult {
  PASSED
  FAILED
  PENDING
}

model Role {
  role_id String   @id @default(uuid()) @map("role_id")
  name    RoleName @unique
  users   User[]

  @@map("roles")
}

model User {
  created_at            DateTime             @default(now())
  active_state_id       String?
  email                 String               @unique
  organisation_id       String
  user_id               String               @unique @map("user_id")
  password_hash         String               @map("password_hash")
  role_id               String?
  id                    String               @id @default(uuid()) @map("id")
  first_name            String?
  last_name             String?
  middle_name           String?
  
  // Relations
  active_state          ActiveState?         @relation(fields: [active_state_id], references: [state_id])
  organisation          Organisation         @relation(fields: [organisation_id], references: [organisation_id])
  role                  Role?                @relation(fields: [role_id], references: [role_id])
  
  // Order relations
  orders                Order[]              @relation("OrderCreatedBy")
  
  // Entry order relations
  createdEntryOrders    EntryOrder[]         @relation("EntryOrderCreator")
  reviewedEntryOrders   EntryOrder[]         @relation("EntryOrderReviewer")
  inventoryAllocations  InventoryAllocation[] @relation("InventoryAllocator")
  
  // ✅ NEW: Additional inventory relations for traceability
  modifiedAllocations   InventoryAllocation[] @relation("InventoryModifier")
  createdInventory      Inventory[]          @relation("InventoryCreator")
  modifiedInventory     Inventory[]          @relation("InventoryLastModifier")
  
  // Departure order relations
  createdDepartureOrders DepartureOrder[]    @relation("DepartureOrderCreator")
  reviewedDepartureOrders DepartureOrder[]   @relation("DepartureOrderReviewer")
  departureAllocations  DepartureAllocation[] @relation("DepartureAllocator")
  
  // Inventory relations
  inventoryLogs         InventoryLog[]
  cellAssignments       CellAssignment[]     @relation("AssignedByUser")
  
  // ✅ NEW: Quality control and audit relations
  qualityTransitions    QualityControlTransition[] @relation("QualityTransitionPerformer")
  systemAudits          SystemAuditLog[]     @relation("UserSystemAudits")
  
  // ✅ FIXED: Add missing audit relation
  audits                EntryOrderAudit[]    @relation("UserAudits")

  @@map("users")
}

model Organisation {
  organisation_id String   @id @default(uuid()) @map("organisation_id")
  name            String
  address         Json?
  tax_id          String?
  created_at      DateTime @default(now())
  orders          Order[]
  users           User[]

  @@map("organisations")
}

model ActiveState {
  state_id String     @id @default(uuid()) @map("state_id")
  name     String     @unique
  Customer Customer[]
  Product  Product[]
  User     User[]

  @@map("active_states")
}

model Origin {
  origin_id   String        @id @default(uuid()) @map("origin_id")
  name        String        @unique
  type        OriginType
  description String?
  EntryOrder  EntryOrder[]

  @@map("origins")
}

model DocumentType {
  document_type_id String              @id @default(uuid()) @map("document_type_id")
  name             String              @unique
  type             DocumentTypeEntry
  description      String?
  EntryOrder       EntryOrder[]

  @@map("document_types")
}

// ✅ FIXED: Rename the model to avoid conflict
model DepartureDocumentType {
  document_type_id String                @id @default(uuid()) @map("document_type_id")
  name             String                @unique
  type             DocumentTypeDeparture
  description      String?
  DepartureOrder   DepartureOrder[]

  @@map("departure_document_types")
}

model ExitOption {
  exit_option_id String           @id @default(uuid()) @map("exit_option_id")
  name           String           @unique
  DepartureOrder DepartureOrder[] // ✅ This relation now works with the opposite field

  @@map("exit_options")
}

model CustomerType {
  customer_type_id String     @id @default(uuid()) @map("customer_type_id")
  name             String     @unique
  discount_rate    Decimal?   @db.Decimal(5, 2)
  Customer         Customer[]

  @@map("customer_types")
}

model Label {
  label_id       String           @id @default(uuid()) @map("label_id")
  name           String           @unique
  DepartureOrder DepartureOrder[]

  @@map("labels")
}

model ProductLine {
  product_line_id String    @id @default(uuid()) @map("product_line_id")
  name            String    @unique
  Product         Product[]

  @@map("product_lines")
}

model GroupName {
  group_id         String    @id @default(uuid()) @map("group_id")
  name             String    @unique
  product_category String?
  Product          Product[]

  @@map("group_names")
}

model Country {
  country_id String     @id @default(uuid()) @map("country_id")
  name       String     @unique
  Supplier   Supplier[]

  @@map("countries")
}

model TemperatureRange {
  temperature_range_id String    @id @default(uuid()) @map("temperature_id")
  range                String    @unique
  min_celsius          Int?
  max_celsius          Int?
  Product              Product[]

  @@map("temperature_ranges")
}

model Supplier {
  created_at   DateTime     @default(now())
  supplier_id String       @id @default(uuid()) @map("supplier_id")
  name        String
  address     String?
  city        String?
  country_id  String?
  email       String?
  phone       String?
  ruc         String?
  country     Country?     @relation(fields: [country_id], references: [country_id])
  entryOrderProducts EntryOrderProduct[]

  @@map("suppliers")
}

model Customer {
  customer_id     String           @id @default(uuid()) @map("customer_id")
  name            String?
  type_id         String?
  billing_address Json?
  active_state_id String?
  created_at      DateTime?        @default(now())
  active_state    ActiveState?     @relation(fields: [active_state_id], references: [state_id])
  type            CustomerType?    @relation(fields: [type_id], references: [customer_type_id])
  DepartureOrder  DepartureOrder[]

  @@index([type_id], map: "idx_customer_type")
  @@map("customers")
}

model Product {
  product_id           String           @id @default(uuid()) @map("product_id")
  product_code         String           @unique
  created_at           DateTime         @default(now())
  name                 String
  product_line_id      String
  group_id             String
  active_state_id      String?
  humidity             String?
  manufacturer         String?
  storage_conditions   String?
  temperature_range_id String?
  unit_weight          Decimal?         @db.Decimal(10, 2) 
  unit_volume          Decimal?         @db.Decimal(10, 2) 
  
  active_state         ActiveState?     @relation(fields: [active_state_id], references: [state_id])
  group                GroupName        @relation(fields: [group_id], references: [group_id])
  product_line         ProductLine      @relation(fields: [product_line_id], references: [product_line_id])
  temperature_range    TemperatureRange? @relation(fields: [temperature_range_id], references: [temperature_range_id])
  
  // Relations
  inventory            Inventory[]      @relation(name: "ProductInventory")     
  inventoryLogs        InventoryLog[]   @relation(name: "ProductInventoryLogs")
  entryOrderProducts   EntryOrderProduct[]
  departureOrderProducts DepartureOrderProduct[]

  @@map("products")
}

model Order {
  status          String          @default("PENDING")
  created_at      DateTime        @default(now())
  created_by      String
  order_id        String          @id @default(uuid()) @map("order_id")
  order_type      String
  organisation_id String
  priority        String?
  departureOrder  DepartureOrder?
  entryOrder      EntryOrder?
  createdBy       User            @relation("OrderCreatedBy", fields: [created_by], references: [id])
  organisation    Organisation    @relation(fields: [organisation_id], references: [organisation_id])

  @@index([created_at], map: "idx_order_creation")
  @@map("orders")
}

model EntryOrder {
  entry_order_id              String              @id @default(uuid()) @map("entry_order_id")
  order_id                    String              @unique
  entry_order_no              String              @unique
  
  // Basic order info
  origin_id                   String?
  document_type_id            String?
  registration_date           DateTime            @default(now())
  document_date               DateTime?
  entry_date_time             DateTime?
  created_by                  String
  
  // Order details
  order_status                OrderStatusEntry    @default(REVISION)
  total_volume                Decimal?            @db.Decimal(10, 2)
  total_weight                Decimal?            @db.Decimal(10, 2)
  cif_value                   Decimal?            @db.Decimal(10, 2)
  total_pallets               Int?
  observation                 String?
  
  // Document uploads
  uploaded_documents          Json?
  
  // Review status
  review_status               ReviewStatus        @default(PENDING)
  review_comments             String?
  reviewed_by                 String?
  reviewed_at                 DateTime?
  
  // Warehouse assignment
  warehouse_id                String?
  
  // Relations
  origin                      Origin?             @relation(fields: [origin_id], references: [origin_id])
  documentType                DocumentType?       @relation(fields: [document_type_id], references: [document_type_id])
  order                       Order               @relation(fields: [order_id], references: [order_id])
  creator                     User                @relation("EntryOrderCreator", fields: [created_by], references: [id])
  reviewer                    User?               @relation("EntryOrderReviewer", fields: [reviewed_by], references: [id])
  warehouse                   Warehouse?          @relation(fields: [warehouse_id], references: [warehouse_id])
  
  // Multiple products in entry order
  products                    EntryOrderProduct[]
  inventoryAllocations        InventoryAllocation[]
  inventoryLogs               InventoryLog[]      @relation(name: "EntryOrderLogs")
  
  // ✅ FIXED: Add missing audit relation
  audits                      EntryOrderAudit[]

  @@map("entry_orders")
}

model EntryOrderProduct {
  entry_order_product_id    String              @id @default(uuid()) @map("entry_order_product_id")
  entry_order_id            String              @map("entry_order_id")
  
  // Product identification
  serial_number             String?
  supplier_id               String?
  product_code              String
  product_id                String
  lot_series                String?
  
  // Dates
  manufacturing_date        DateTime?
  expiration_date           DateTime?
  
  // Quantities (as received)
  inventory_quantity        Int
  package_quantity          Int
  quantity_pallets          Int?
  presentation              PresentationType    @default(CAJA)
  guide_number              String?
  weight_kg                 Decimal             @db.Decimal(10, 2)
  volume_m3                 Decimal?            @db.Decimal(10, 2)
  insured_value             Decimal?            @db.Decimal(10, 2)
  
  // Environmental conditions
  temperature_range         TemperatureRangeType @default(AMBIENTE)
  humidity                  String?
  health_registration       String?
  
  // Relations
  entry_order               EntryOrder          @relation(fields: [entry_order_id], references: [entry_order_id])
  supplier                  Supplier?           @relation(fields: [supplier_id], references: [supplier_id])
  product                   Product             @relation(fields: [product_id], references: [product_id])
  
  // Inventory allocations for this product
  inventoryAllocations      InventoryAllocation[]
  inventoryLogs             InventoryLog[]

  @@unique([entry_order_id, product_code], name: "entry_order_product_unique")
  @@map("entry_order_products")
}

model InventoryAllocation {
  allocation_id             String              @id @default(uuid()) @map("allocation_id")
  entry_order_id            String              @map("entry_order_id")
  entry_order_product_id    String              @map("entry_order_product_id")
  
  // Allocation details (filled by warehouse staff)
  inventory_quantity        Int
  package_quantity          Int
  quantity_pallets          Int?
  presentation              PresentationType    @default(PALETA)
  weight_kg                 Decimal             @db.Decimal(10, 2)
  volume_m3                 Decimal?            @db.Decimal(10, 2)
  
  // Cell assignment
  cell_id                   String
  
  // Product status with your coding system
  product_status            ProductStatus       @default(PAL_NORMAL)
  status_code               Int
  
  // ✅ NEW: Quality control status (starts in CUARENTENA)
  quality_status            QualityControlStatus @default(CUARENTENA)
  
  // ✅ NEW: User traceability fields
  allocated_by              String
  allocated_at              DateTime            @default(now())
  last_modified_by          String?
  last_modified_at          DateTime?
  
  // Documentation
  guide_number              String?
  uploaded_documents        Json?
  observations              String?
  
  // Status
  status                    String              @default("ACTIVE")
  
  // Relations
  entry_order               EntryOrder          @relation(fields: [entry_order_id], references: [entry_order_id])
  entry_order_product       EntryOrderProduct   @relation(fields: [entry_order_product_id], references: [entry_order_product_id])
  cell                      WarehouseCell       @relation(fields: [cell_id], references: [id])
  allocator                 User                @relation("InventoryAllocator", fields: [allocated_by], references: [id])
  lastModifier              User?               @relation("InventoryModifier", fields: [last_modified_by], references: [id])
  
  // Create actual inventory record
  inventory                 Inventory[]
  inventoryLogs             InventoryLog[]
  
  // ✅ NEW: Quality control transitions
  qualityTransitions        QualityControlTransition[]
  
  // ✅ FIXED: Add missing relation for departure allocations
  departureAllocations      DepartureAllocation[]

  @@map("inventory_allocations")
}

// NEW: Updated Departure Order model matching entry flow
model DepartureOrder {
  departure_order_id          String              @id @default(uuid()) @map("departure_order_id")
  order_id                    String              @unique
  departure_order_no          String              @unique
  
  // Basic order info
  customer_id                 String
  document_type_id            String?
  registration_date           DateTime            @default(now())
  document_date               DateTime?
  departure_date_time         DateTime?
  created_by                  String
  
  // Order details
  order_status                OrderStatusDeparture @default(PENDING)
  destination_point           String?             // Where goods are going
  transport_type              String?             // Truck, Ship, etc.
  carrier_name                String?             // Transport company
  total_volume                Decimal?            @db.Decimal(10, 2)
  total_weight                Decimal?            @db.Decimal(10, 2)
  total_value                 Decimal?            @db.Decimal(10, 2)
  total_pallets               Int?
  observation                 String?
  
  // Document uploads
  uploaded_documents          Json?
  
  // Review status
  review_status               ReviewStatus        @default(PENDING)
  review_comments             String?
  reviewed_by                 String?
  reviewed_at                 DateTime?
  
  // Warehouse assignment
  warehouse_id                String?
  label_id                    String?
  exit_option_id              String?             // ✅ FIXED: Add missing field
  
  // Relations
  customer                    Customer            @relation(fields: [customer_id], references: [customer_id])
  documentType                DepartureDocumentType? @relation(fields: [document_type_id], references: [document_type_id])
  order                       Order               @relation(fields: [order_id], references: [order_id])
  creator                     User                @relation("DepartureOrderCreator", fields: [created_by], references: [id])
  reviewer                    User?               @relation("DepartureOrderReviewer", fields: [reviewed_by], references: [id])
  warehouse                   Warehouse?          @relation(fields: [warehouse_id], references: [warehouse_id])
  label                       Label?              @relation(fields: [label_id], references: [label_id])
  exitOption                  ExitOption?         @relation(fields: [exit_option_id], references: [exit_option_id]) // ✅ FIXED: Add missing relation
  
  // Multiple products in departure order
  products                    DepartureOrderProduct[]
  departureAllocations        DepartureAllocation[]
  inventoryLogs               InventoryLog[]      @relation(name: "DepartureOrderLogs")

  @@map("departure_orders")
}

// NEW: Departure Order Product model
model DepartureOrderProduct {
  departure_order_product_id  String              @id @default(uuid()) @map("departure_order_product_id")
  departure_order_id          String              @map("departure_order_id")
  
  // Product identification
  product_code                String
  product_id                  String
  lot_series                  String?
  
  // Quantities requested
  requested_quantity          Int
  requested_packages          Int
  requested_pallets           Int?
  presentation                PresentationType    @default(CAJA)
  requested_weight            Decimal             @db.Decimal(10, 2)
  requested_volume            Decimal?            @db.Decimal(10, 2)
  unit_price                  Decimal?            @db.Decimal(10, 2)
  total_value                 Decimal?            @db.Decimal(10, 2)
  
  // Special requirements
  temperature_requirement     TemperatureRangeType @default(AMBIENTE)
  special_handling            String?
  delivery_instructions       String?
  
  // Relations
  departure_order             DepartureOrder      @relation(fields: [departure_order_id], references: [departure_order_id])
  product                     Product             @relation(fields: [product_id], references: [product_id])
  
  // Departure allocations for this product
  departureAllocations        DepartureAllocation[]
  inventoryLogs               InventoryLog[]

  @@unique([departure_order_id, product_code], name: "departure_order_product_unique")
  @@map("departure_order_products")
}

// ✅ FIXED: Add missing relation in DepartureAllocation
model DepartureAllocation {
  allocation_id               String              @id @default(uuid()) @map("allocation_id")
  departure_order_id          String              @map("departure_order_id")
  departure_order_product_id  String              @map("departure_order_product_id")
  
  // Source inventory allocation
  source_allocation_id        String              // Which inventory allocation this comes from
  
  // Allocation details (filled by warehouse staff)
  allocated_quantity          Int                 // How much to take from inventory
  allocated_packages          Int                 // Package quantity for this allocation
  allocated_pallets           Int?                // Pallets for departure
  presentation                PresentationType    @default(PALETA)
  allocated_weight            Decimal             @db.Decimal(10, 2)
  allocated_volume            Decimal?            @db.Decimal(10, 2)
  
  // Cell source
  cell_id                     String              // Which cell to take from
  
  // Product status
  product_status              ProductStatus
  status_code                 Int
  
  // Documentation
  guide_number                String?
  uploaded_documents          Json?
  observations                String?
  
  // Tracking
  allocated_by                String              // Warehouse user
  allocated_at                DateTime            @default(now())
  status                      String              @default("ACTIVE")
  
  // Relations
  departure_order             DepartureOrder      @relation(fields: [departure_order_id], references: [departure_order_id])
  departure_order_product     DepartureOrderProduct @relation(fields: [departure_order_product_id], references: [departure_order_product_id])
  source_allocation           InventoryAllocation @relation(fields: [source_allocation_id], references: [allocation_id])
  cell                        WarehouseCell       @relation(fields: [cell_id], references: [id])
  allocator                   User                @relation("DepartureAllocator", fields: [allocated_by], references: [id])
  
  inventoryLogs               InventoryLog[]

  @@map("departure_allocations")
}

model WarehouseCell {
  id                        String                @id @default(uuid()) @map("cell_id")
  warehouse_id              String
  row                       String
  bay                       Int
  position                  Int
  kind                      CellKind              @default(NORMAL)
  status                    CellStatus            @default(AVAILABLE)
  cell_role                 CellRole              @default(STANDARD)
  capacity                  Decimal               @db.Decimal(10,2)  @default(1)
  currentUsage              Decimal               @db.Decimal(10,2)  @default(0)
  
  // Current contents tracking
  current_packaging_qty     Int                   @default(0)
  current_weight            Decimal               @db.Decimal(10,2) @default(0)

  warehouse                 Warehouse             @relation(fields: [warehouse_id], references: [warehouse_id])
  inventoryLogs             InventoryLog[]        @relation("CellLogs")
  inventory                 Inventory[]           @relation(name: "CellInventory")
  cellAssignments           CellAssignment[]
  inventoryAllocations      InventoryAllocation[]
  departureAllocations      DepartureAllocation[]
  
  // ✅ NEW: Quality control transition relations
  transitionsFrom           QualityControlTransition[] @relation("TransitionFromCell")
  transitionsTo             QualityControlTransition[] @relation("TransitionToCell")

  @@unique([warehouse_id, row, bay, position], name: "idx_cell_unique")
  @@map("warehouse_cells")
}

model Warehouse {
  warehouse_id       String          @id @default(uuid()) @map("warehouse_id")
  name               String          @unique
  address            Json?
  location           String?
  capacity           Int?
  max_occupancy      Int?
  status             String?
  inventory          Inventory[]
  entryOrders        EntryOrder[]
  departureOrders    DepartureOrder[]
  cells              WarehouseCell[]  
  inventoryLogs      InventoryLog[]

  @@map("warehouses")
}

model Inventory {
  inventory_id              String                @id @default(uuid()) @map("inventory_id")
  allocation_id             String?
  product_id                String
  cell_id                   String
  warehouse_id              String
  
  // Current quantities
  current_quantity          Int
  current_package_quantity  Int
  current_weight            Decimal               @db.Decimal(10, 2)
  current_volume            Decimal?              @db.Decimal(10, 2)
  
  // Status
  status                    InventoryStatus       @default(QUARANTINED)  // ✅ Changed: Start in quarantine
  product_status            ProductStatus
  status_code               Int
  
  // ✅ NEW: Quality control status
  quality_status            QualityControlStatus  @default(CUARENTENA)
  
  // ✅ NEW: User traceability
  created_by                String?
  last_modified_by          String?
  last_modified_at          DateTime?
  
  // Tracking
  created_at                DateTime              @default(now())
  last_updated              DateTime              @updatedAt
  
  // Relations
  allocation                InventoryAllocation?  @relation(fields: [allocation_id], references: [allocation_id])
  product                   Product               @relation(fields: [product_id], references: [product_id], name: "ProductInventory")
  cell                      WarehouseCell         @relation("CellInventory", fields: [cell_id], references: [id])
  warehouse                 Warehouse             @relation(fields: [warehouse_id], references: [warehouse_id])
  creator                   User?                 @relation("InventoryCreator", fields: [created_by], references: [id])
  lastModifier              User?                 @relation("InventoryLastModifier", fields: [last_modified_by], references: [id])
  
  // ✅ NEW: Quality control transitions for this inventory
  qualityTransitions        QualityControlTransition[]

  @@unique([allocation_id, cell_id], name: "allocation_cell_unique")
  @@map("inventory")
}

model InventoryLog {
  log_id                    String                @id @default(uuid()) @map("log_id")
  timestamp                 DateTime              @default(now())
  user_id                   String
  product_id                String
  
  // Movement details
  movement_type             MovementType
  quantity_change           Int
  package_change            Int                   @default(0)
  weight_change             Decimal               @db.Decimal(10, 2) @default(0)
  volume_change             Decimal?              @db.Decimal(10, 2)
  
  // References
  entry_order_id            String?               @map("entry_order_id")
  entry_order_product_id    String?
  allocation_id             String?
  departure_order_id        String?               @map("departure_order_id")
  departure_order_product_id String?
  departure_allocation_id   String?
  warehouse_id              String?
  cell_id                   String?
  
  // Product status
  product_status            ProductStatus?
  status_code               Int?
  
  notes                     String?
  
  // Relations
  user                      User                  @relation(fields: [user_id], references: [id])
  product                   Product               @relation(fields: [product_id], references: [product_id], name: "ProductInventoryLogs")
  entry_order               EntryOrder?           @relation(fields: [entry_order_id], references: [entry_order_id], name: "EntryOrderLogs")
  entry_order_product       EntryOrderProduct?    @relation(fields: [entry_order_product_id], references: [entry_order_product_id])
  allocation                InventoryAllocation?  @relation(fields: [allocation_id], references: [allocation_id])
  departure_order           DepartureOrder?       @relation(fields: [departure_order_id], references: [departure_order_id], name: "DepartureOrderLogs")
  departure_order_product   DepartureOrderProduct? @relation(fields: [departure_order_product_id], references: [departure_order_product_id])
  departure_allocation      DepartureAllocation?  @relation(fields: [departure_allocation_id], references: [allocation_id])
  warehouse                 Warehouse?            @relation(fields: [warehouse_id], references: [warehouse_id])
  cell                      WarehouseCell?        @relation("CellLogs", fields: [cell_id], references: [id])

  @@index([timestamp, product_id], map: "idx_log_timestamp_product")
  @@map("inventory_logs")
}

model CellAssignment {
  assignment_id             String              @id @default(uuid()) @map("assignment_id")
  cell_id                   String
  departure_order_id        String?
  entry_order_id            String?
  assigned_by               String
  assigned_at               DateTime            @default(now())
  packaging_quantity        Int
  weight                    Decimal             @db.Decimal(10, 2)
  packaging_code            Int
  status                    String              @default("ACTIVE")
  
  cell                      WarehouseCell       @relation(fields: [cell_id], references: [id])
  assignedBy                User                @relation("AssignedByUser", fields: [assigned_by], references: [id])

  @@map("cell_assignments")
}

model EntryOrderAudit {
  audit_id          String      @id @default(uuid()) @map("audit_id")
  entry_order_id    String      @map("entry_order_id")
  audited_by        String      @map("audited_by")
  audit_date        DateTime    @default(now())
  audit_result      AuditResult
  comments          String?
  discrepancy_notes String?
  
  entry_order       EntryOrder  @relation(fields: [entry_order_id], references: [entry_order_id])
  auditor           User        @relation("UserAudits", fields: [audited_by], references: [id])
  
  @@map("entry_order_audits")
}

// ✅ NEW: Quality Control Transition Model for tracking status changes
model QualityControlTransition {
  transition_id             String                @id @default(uuid()) @map("transition_id")
  
  // What was transitioned
  allocation_id             String?               // If whole allocation moved
  inventory_id              String?               // If specific inventory moved
  
  // Transition details
  from_status               QualityControlStatus?
  to_status                 QualityControlStatus
  
  // Quantities moved (for partial moves)
  quantity_moved            Int
  package_quantity_moved    Int
  weight_moved              Decimal               @db.Decimal(10, 2)
  volume_moved              Decimal?              @db.Decimal(10, 2)
  
  // Cell movement (if changed)
  from_cell_id              String?
  to_cell_id                String?
  
  // User tracking
  performed_by              String
  performed_at              DateTime              @default(now())
  reason                    String?
  notes                     String?
  
  // Relations
  allocation                InventoryAllocation?  @relation(fields: [allocation_id], references: [allocation_id])
  inventory                 Inventory?            @relation(fields: [inventory_id], references: [inventory_id])
  performer                 User                  @relation("QualityTransitionPerformer", fields: [performed_by], references: [id])
  fromCell                  WarehouseCell?        @relation("TransitionFromCell", fields: [from_cell_id], references: [id])
  toCell                    WarehouseCell?        @relation("TransitionToCell", fields: [to_cell_id], references: [id])

  @@map("quality_control_transitions")
}

// ✅ NEW: System-wide audit trail for all user actions
model SystemAuditLog {
  audit_id                  String                @id @default(uuid()) @map("audit_id")
  
  // User and timestamp
  user_id                   String
  performed_at              DateTime              @default(now())
  action                    SystemAction
  
  // Context
  entity_type               String                // "EntryOrder", "Inventory", "DepartureOrder", etc.
  entity_id                 String                // The ID of the affected entity
  
  // Details
  description               String                // Human readable description
  old_values                Json?                 // Previous state (for updates)
  new_values                Json?                 // New state (for updates)
  metadata                  Json?                 // Additional context
  
  // IP and session tracking
  ip_address                String?
  user_agent                String?
  session_id                String?
  
  // Relations
  user                      User                  @relation("UserSystemAudits", fields: [user_id], references: [id])

  @@index([user_id, performed_at], map: "idx_audit_user_time")
  @@index([entity_type, entity_id], map: "idx_audit_entity")
  @@index([action, performed_at], map: "idx_audit_action_time")
  @@map("system_audit_logs")
}