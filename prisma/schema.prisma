generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Role enum simplified to just customer and warehouse roles
enum RoleName {
  CUSTOMER 
  WAREHOUSE
  ADMIN
}

model Role {
  role_id String   @id @default(uuid()) @map("role_id")
  name    RoleName @unique
  users   User[]

  @@map("roles")
}

model User {
  created_at            DateTime             @default(now())
  active_state_id       String?
  email                 String               @unique
  organisation_id       String
  user_id               String               @unique @map("user_id")
  password_hash         String               @map("password_hash")
  role_id               String?
  id                    String               @id @default(uuid()) @map("id")
  first_name            String?
  last_name             String?
  middle_name           String?
  DepartureOrder        DepartureOrder[]
  EntryOrder            EntryOrder[]
  orders                Order[]              @relation("OrderCreatedBy")
  active_state          ActiveState?         @relation(fields: [active_state_id], references: [state_id])
  organisation          Organisation         @relation(fields: [organisation_id], references: [organisation_id])
  role                  Role?                @relation(fields: [role_id], references: [role_id])
  inventoryLogs         InventoryLog[]
  entryOrderAudits      EntryOrderAudit[]    @relation("UserAudits")
  cellAssignments       CellAssignment[]     @relation("AssignedByUser")

  @@map("users")
}

model Organisation {
  organisation_id String   @id @default(uuid()) @map("organisation_id")
  name            String
  address         Json?
  tax_id          String?
  created_at      DateTime @default(now())
  orders          Order[]
  users           User[]

  @@map("organisations")
}

model ActiveState {
  state_id String     @id @default(uuid()) @map("state_id")
  name     String     @unique
  Customer Customer[]
  Product  Product[]
  User     User[]

  @@map("active_states")
}

// Base models that haven't changed
model Origin {
  origin_id  String       @id @default(uuid()) @map("origin_id")
  name       String       @unique
  EntryOrder EntryOrder[]

  @@map("origins")
}

model DocumentType {
  document_type_id String           @id @default(uuid()) @map("document_type_id")
  name             String           @unique
  DepartureOrder   DepartureOrder[]
  EntryOrder       EntryOrder[]

  @@map("document_types")
}

model ExitOption {
  exit_option_id String           @id @default(uuid()) @map("exit_option_id")
  name           String           @unique
  DepartureOrder DepartureOrder[]

  @@map("exit_options")
}

model CustomerType {
  customer_type_id String     @id @default(uuid()) @map("customer_type_id")
  name             String     @unique
  discount_rate    Decimal?   @db.Decimal(5, 2)
  Customer         Customer[]

  @@map("customer_types")
}

model Label {
  label_id       String           @id @default(uuid()) @map("label_id")
  name           String           @unique
  DepartureOrder DepartureOrder[]

  @@map("labels")
}

model PackagingType {
  packaging_type_id String           @id @default(uuid()) @map("packaging_type_id")
  name              String           @unique
  DepartureOrder    DepartureOrder[]

  @@map("packaging_types")
}

model ProductLine {
  product_line_id String    @id @default(uuid()) @map("product_line_id")
  name            String    @unique
  Product         Product[]

  @@map("product_lines")
}

model GroupName {
  group_id         String    @id @default(uuid()) @map("group_id")
  name             String    @unique
  product_category String?
  Product          Product[]

  @@map("group_names")
}

model Country {
  country_id String     @id @default(uuid()) @map("country_id")
  name       String     @unique
  Supplier   Supplier[]

  @@map("countries")
}

model TemperatureRange {
  temperature_range_id String    @id @default(uuid()) @map("temperature_id")
  range                String    @unique
  min_celsius          Int?
  max_celsius          Int?
  Product              Product[]

  @@map("temperature_ranges")
}

model Status {
  status_id      String           @id @default(uuid()) @map("status_id")
  name           String           @unique 
  description    String?          // e.g., "PENDING", "SHIPPED", "RECEIVED"
  EntryOrder     EntryOrder[]
  

  @@map("statuses")
}

model Supplier {
  created_at   DateTime     @default(now())
  supplier_id String       @id @default(uuid()) @map("supplier_id")
  name        String
  address     String?
  city        String?
  country_id  String?
  email       String?
  phone       String?
  ruc         String?
  EntryOrder  EntryOrder[]
  country     Country?     @relation(fields: [country_id], references: [country_id])

  @@map("suppliers")
}

model Customer {
  customer_id     String           @id @default(uuid()) @map("customer_id")
  name            String?
  type_id         String?
  billing_address Json?
  active_state_id String?
  created_at      DateTime?        @default(now())
  active_state    ActiveState?     @relation(fields: [active_state_id], references: [state_id])
  type            CustomerType?    @relation(fields: [type_id], references: [customer_type_id])
  DepartureOrder  DepartureOrder[]

  @@index([type_id], map: "idx_customer_type")
  @@map("customers")
}

model Product {
  product_id           String           @id @default(uuid()) @map("product_id")
  created_at           DateTime         @default(now())
  name                 String
  product_line_id      String
  group_id             String
  active_state_id      String?
  humidity             String?
  manufacturer         String?
  storage_conditions   String?
  temperature_range_id String?
  unit_weight          Decimal?         @db.Decimal(10, 2) 
  unit_volume          Decimal?         @db.Decimal(10, 2) 
  active_state         ActiveState?     @relation(fields: [active_state_id], references: [state_id])
  group                GroupName        @relation(fields: [group_id], references: [group_id])
  product_line         ProductLine      @relation(fields: [product_line_id], references: [product_line_id])
  temperature_range    TemperatureRange? @relation(fields: [temperature_range_id], references: [temperature_range_id])
  inventory            Inventory[]      @relation(name: "ProductInventory")     
  inventoryLogs        InventoryLog[]   @relation(name: "ProductInventoryLogs")
  entryOrders          EntryOrder[]
  departureOrders      DepartureOrder[]

  @@map("products")
}

model Order {
  status          String          @default("PENDING")
  created_at      DateTime        @default(now())
  created_by      String
  order_id        String          @id @default(uuid()) @map("order_id")
  order_type      String
  organisation_id String
  priority        String?         // "HIGH", "NORMAL" (for picking)
  departureOrder  DepartureOrder?
  entryOrder      EntryOrder?
  createdBy       User            @relation("OrderCreatedBy", fields: [created_by], references: [id])
  organisation    Organisation    @relation(fields: [organisation_id], references: [organisation_id])

  @@index([created_at], map: "idx_order_creation")
  @@map("orders")
}

model OrderType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  schema      String?

  @@map("order_types")
}

model EntryOrder {
  document_type_id              String?
  entry_order_id                String        @id @default(uuid()) @map("entry_order_id")
  origin_id                     String?
  supplier_id                   String?
  order_id                      String        @unique
  admission_date_time           DateTime?
  cif_value                     String?
  document_date                 DateTime?
  document_status               String?
  entry_order_no                String?       @unique
  expiration_date               DateTime?
  humidity                      String?
  lot_series                    String?
  mfd_date_time                 DateTime?
  observation                   String?
  personnel_incharge_id         String?
  presentation                  String?
  product_id                    String?       @map("product_id")
  product                       Product?      @relation(fields: [product_id], references: [product_id])
  quantity_packaging            Int?          // Changed to Int for better calculations
  registration_date             DateTime?
  technical_specification       String?
  total_qty                     Int?          // Changed to Int
  total_volume                  Decimal?      @db.Decimal(10, 2)
  total_weight                  Decimal?      @db.Decimal(10, 2)
  order_progress                String?
  certificate_protocol_analysis String?
  comments                      String?
  entry_date                    DateTime?     @default(now())
  entry_transfer_note           String?
  insured_value                 Decimal?      @db.Decimal(10, 2)
  palettes                      Int?          // Changed to Int
  product_description           String?
  status_id                     String?
  type                          String?
  max_temperature               String?
  min_temperature               String?
  warehouse_id                  String? 
  
  // Tracking of quantities for partial assignments
  remaining_packaging_qty       Int?          // Tracks remaining packaging after cell assignments
  remaining_weight              Decimal?      @db.Decimal(10, 2)
  
  audit_status                  AuditResult   @default(PENDING)
  
  departure_orders              DepartureOrder[]
  documentType                  DocumentType? @relation(fields: [document_type_id], references: [document_type_id])
  order                         Order         @relation(fields: [order_id], references: [order_id])
  origin                        Origin?       @relation(fields: [origin_id], references: [origin_id])
  personnel_incharge            User?         @relation(fields: [personnel_incharge_id], references: [id])
  supplier                      Supplier?     @relation(fields: [supplier_id], references: [supplier_id])
  entry_status                  Status?       @relation(fields: [status_id], references: [status_id])
  inventory                     Inventory[]   @relation(name: "EntryInventory")
  inventoryLogs                 InventoryLog[] @relation(name: "EntryOrderLogs")
  warehouse                     Warehouse?    @relation(fields: [warehouse_id], references: [warehouse_id])
  audits                        EntryOrderAudit[]
  cellAssignments               CellAssignment[] // New relation to track cell assignments

  @@map("entry_orders")
}

model DepartureOrder {
  product_id                    String?       @map("product_id")
  product                       Product?      @relation(fields: [product_id], references: [product_id])
  customer_id                   String?
  departure_order_id            String        @id @default(uuid()) @map("departure_order_id")
  label_id                      String?
  packaging_id                  String?
  order_id                      String        @unique
  entry_order_id                String?       @map("entry_order_id")
  arrival_point                 String?
  date_and_time_of_transfer     DateTime?
  departure_order_no            String?
  document_date                 DateTime?
  document_no                   String?
  document_status               String?
  document_type_id              String?
  id_responsible                String?
  observation                   String?
  order_progress                String?
  personnel_in_charge_id        String?
  registration_date             DateTime?
  responsible_for_collection    String?
  exit_option_id                String?
  departure_transfer_note       String?
  insured_value                 Decimal?      @db.Decimal(10, 2)
  palettes                      String?
  product_description           String?
  type                          String?
  total_qty                     Int?          
  total_volume                  Decimal?      @db.Decimal(10, 2)
  total_weight                  Decimal?      @db.Decimal(10, 2)
  departure_date                DateTime?     @default(now())
  warehouse_id                  String? 
  packaging_list                String?       // URL to uploaded packaging list file
  
  customer                      Customer?     @relation(fields: [customer_id], references: [customer_id])
  documentType                  DocumentType? @relation(fields: [document_type_id], references: [document_type_id])
  ExitOption                    ExitOption?   @relation(fields: [exit_option_id], references: [exit_option_id])
  label                         Label?        @relation(fields: [label_id], references: [label_id])
  order                         Order         @relation(fields: [order_id], references: [order_id])
  packagingType                 PackagingType? @relation(fields: [packaging_id], references: [packaging_type_id])
  personnel_in_charge           User?         @relation(fields: [personnel_in_charge_id], references: [id])
  entry_order                   EntryOrder?   @relation(fields: [entry_order_id], references: [entry_order_id])
  inventoryLogs                 InventoryLog[] @relation(name: "DepartureOrderLogs")
  warehouse                     Warehouse?    @relation(fields: [warehouse_id], references: [warehouse_id])
  inventory                     Inventory[]   @relation(name: "DepartureInventory")
  cellAssignments               CellAssignment[] @relation("DepartureCellAssignments")

  @@map("departure_orders")
}

// New model to track cell assignments for EntryOrders
model CellAssignment {
  assignment_id         String        @id @default(uuid()) @map("assignment_id")
  entry_order_id        String?       // Entry Order being assigned
  departure_order_id    String?       // Departure Order being fulfilled
  cell_id               String        // Cell being assigned
  assigned_at           DateTime      @default(now())
  assigned_by           String        // User making the assignment
  packaging_quantity    Int           // Number of packages assigned to this cell
  weight                Decimal       @db.Decimal(10, 2) // Weight assigned to this cell
  volume                Decimal?      @db.Decimal(10, 2) // Volume assigned to this cell
  status                String        @default("ACTIVE") // Status of this assignment
  
  // Relations
  entry_order           EntryOrder?   @relation(fields: [entry_order_id], references: [entry_order_id])
  departure_order       DepartureOrder? @relation("DepartureCellAssignments", fields: [departure_order_id], references: [departure_order_id])
  cell                  WarehouseCell @relation(fields: [cell_id], references: [id])
  user                  User          @relation("AssignedByUser", fields: [assigned_by], references: [id])
  
  @@map("cell_assignments")
}

model Inventory {
  inventory_id         String           @id @default(uuid()) @map("inventory_id")
  product_id           String
  entry_order_id       String?          @map("entry_order_id")
  departure_order_id   String?          @map("departure_order_id")
  cell_id              String?          // Link to the cell where inventory is stored
  quantity             Int
  expiration_date      DateTime?
  warehouse_id         String? 
  status               InventoryStatus  @default(AVAILABLE)
  packaging_quantity   Int              @default(0) // New field to track number of packages
  weight               Decimal          @db.Decimal(10, 2) @default(0) // New field to track weight
  volume               Decimal?         @db.Decimal(10, 2) // Optional volume tracking

  product              Product          @relation(fields: [product_id], references: [product_id], name: "ProductInventory")
  entry_order          EntryOrder?      @relation(fields: [entry_order_id], references: [entry_order_id], name: "EntryInventory")
  departure_order      DepartureOrder?  @relation(fields: [departure_order_id], references: [departure_order_id], name: "DepartureInventory")
  cell                 WarehouseCell?   @relation("CellInventory", fields: [cell_id], references: [id])
  warehouse            Warehouse?       @relation(fields: [warehouse_id], references: [warehouse_id])

  @@unique([product_id, warehouse_id, cell_id], name: "product_wh_cell_idx")
  @@index([departure_order_id], map: "idx_inventory_departure_order")
  @@index([cell_id], map: "idx_inventory_cell")
  @@map("inventory")
}

model InventoryLog {
  log_id               String           @id @default(uuid()) @map("log_id")
  timestamp            DateTime         @default(now())
  user_id              String
  product_id           String
  last_updated         DateTime?        @updatedAt 
  audit_id             String?          @map("audit_id")
  audit                EntryOrderAudit? @relation(fields: [audit_id], references: [audit_id])
  quantity_change      Int
  packaging_change     Int              @default(0) // New field to track packaging changes
  weight_change        Decimal          @db.Decimal(10, 2) @default(0) // New field to track weight changes
  movement_type        MovementType
  entry_order_id       String?          @map("entry_order_id")
  departure_order_id   String?          @map("departure_order_id")
  warehouse_id         String?          
  cell_id              String?          
  notes                String?          
  cell_assignment_id   String?          // Reference to related cell assignment if applicable

  user                 User             @relation(fields: [user_id], references: [id])
  product              Product          @relation(fields: [product_id], references: [product_id], name: "ProductInventoryLogs")
  entry_order          EntryOrder?      @relation(fields: [entry_order_id], references: [entry_order_id], name: "EntryOrderLogs")
  departure_order      DepartureOrder?  @relation(fields: [departure_order_id], references: [departure_order_id], name: "DepartureOrderLogs")
  warehouse            Warehouse?       @relation(fields: [warehouse_id], references: [warehouse_id]) 
  cell                 WarehouseCell?   @relation("CellLogs", fields: [cell_id], references: [id])

  @@index([timestamp, product_id], map: "idx_log_timestamp_product")
  @@map("inventory_logs")
}

model EntryOrderAudit {
  audit_id          String      @id @default(uuid()) @map("audit_id")
  entry_order_id    String      @map("entry_order_id")
  audited_by        String      @map("audited_by")
  audit_date        DateTime    @default(now())
  audit_result      AuditResult
  comments          String?
  discrepancy_notes   String?    // To explain any differences
  
  entry_order       EntryOrder  @relation(fields: [entry_order_id], references: [entry_order_id])
  auditor           User        @relation("UserAudits", fields: [audited_by], references: [id])
  inventoryLogs     InventoryLog[]
  
  @@map("entry_order_audits")
}

/// a little enum for any special cell types (damaged, quarantine, etc.)
enum CellKind {
  NORMAL
  DAMAGED    // Renamed from V for clarity
  TRANSFER   // Renamed from T for clarity
  RESERVED   // Renamed from R for clarity
}

/// each physical pallet‐slot in the warehouse
model WarehouseCell {
  id               String        @id @default(uuid()) @map("cell_id")
  warehouse_id     String
  /// e.g. "A", "B", ... up to however many rows you need
  row              String
  /// 1 through 28
  bay              Int
  /// 1 through 10
  position         Int
  kind             CellKind      @default(NORMAL)
  status           CellStatus    @default(AVAILABLE)
  cell_role        CellRole      @default(STANDARD)
  capacity         Decimal       @db.Decimal(10,2)  @default(1)  // one pallet per slot
  currentUsage     Decimal       @db.Decimal(10,2)  @default(0)
  
  // Current contents tracking
  current_packaging_qty Int       @default(0) // Tracks actual packaging quantity in cell
  current_weight      Decimal     @db.Decimal(10,2) @default(0) // Tracks actual weight in cell

  warehouse          Warehouse    @relation(fields: [warehouse_id], references: [warehouse_id])
  inventoryLogs      InventoryLog[] @relation("CellLogs")
  inventory          Inventory[]  @relation(name: "CellInventory")
  cellAssignments    CellAssignment[]

  /// ensure we never get duplicates
  @@unique([warehouse_id, row, bay, position], name: "idx_cell_unique")
  @@map("warehouse_cells")
}

model Warehouse {
  warehouse_id       String          @id @default(uuid()) @map("warehouse_id")
  name               String          @unique
  address            Json?
  location           String?
  capacity           Int?
  max_occupancy      Int?
  status             String?
  inventory          Inventory[]
  entryOrders        EntryOrder[]
  departureOrders    DepartureOrder[]
  cells              WarehouseCell[]  
  inventoryLogs      InventoryLog[]

  @@map("warehouses")
}

enum CellStatus {
  AVAILABLE
  OCCUPIED
}

enum DocumentApplicableTo {
  ENTRY
  DEPARTURE

}

enum LocationType {
  STORAGE
  LOADING
  UNLOADING
  TRANSIT
  REPACKAGING
  INSPECTION
  RETURN
  REPAIR
  WAREHOUSE
  DISTRIBUTION
}

enum MovementType {
  ENTRY
  DEPARTURE
  TRANSFER
  ADJUSTMENT
  RETURN        
  DISPOSAL         
  RECALL         
  INSPECTION       
}

enum InventoryStatus {
  AVAILABLE
  RESERVED
  DAMAGED
  DEPLETED
  EXPIRED
  IN_TRANSIT      
  PENDING_INSPECTION 
  QUARANTINED 
  RETURNED       
  DISPOSED        
}

enum AuditResult {
  PASSED
  FAILED
  PENDING
}

enum CellRole {
  STANDARD
  DAMAGED
  EXPIRED
  RETURNS
}